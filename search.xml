<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo博客中“{”与“}”乱码解决方法</title>
      <link href="/2022/05/03/hexo-bo-ke-zhong-yu-luan-ma-jie-jue-fang-fa/"/>
      <url>/2022/05/03/hexo-bo-ke-zhong-yu-luan-ma-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客中“-”与“-”乱码解决方法"><a href="#hexo博客中“-”与“-”乱码解决方法" class="headerlink" title="hexo博客中“{”与“}”乱码解决方法"></a><center>hexo博客中“{”与“}”乱码解决方法</center></h2><h3 id="一、出错原因"><a href="#一、出错原因" class="headerlink" title="一、出错原因"></a>一、出错原因</h3><p>&emsp;&emsp;前几天写了一个教程，网友（Treasure）看了之后问我代码为什么出错了，发现博客中所有的“{”与“}”都成了乱码，效果如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        //只在桌面版网页启用特效        var windowWidth <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>window<span class="token variable">)</span></span>.width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> 768<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            document.write<span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/sakura.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125</span>        <span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>&emsp;&emsp;一开始我还以为是我写错了，结果看我原文件写的是对的，查资料发现“{”与“}”被转义了。 我是用md文件直接导出html文件，发现显示都是正常的，那么很显然时hexo生成html时对数据进行了转义。</p><h3 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h3><p>&emsp;&emsp;找到文件：node_modules\hexo-prism-plugin\src\index.js， 在map中添加对应的转义配置，忽略相关转义操作：</p><pre class=" language-bash"><code class="language-bash">const map <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'&amp;#39;'</span><span class="token keyword">:</span> <span class="token string">'\''</span>,  <span class="token string">'&amp;amp;'</span><span class="token keyword">:</span> <span class="token string">'&amp;'</span>,  <span class="token string">'&amp;gt;'</span><span class="token keyword">:</span> <span class="token string">'>'</span>,  <span class="token string">'&amp;lt;'</span><span class="token keyword">:</span> <span class="token string">'&lt;'</span>,  <span class="token string">'&amp;quot;'</span><span class="token keyword">:</span> <span class="token string">'"'</span>,  <span class="token string">'&amp;#123;'</span><span class="token keyword">:</span> <span class="token string">'{'</span>,  <span class="token string">'&amp;#124;'</span><span class="token keyword">:</span> <span class="token string">'|'</span>,  <span class="token string">'&amp;#125;'</span><span class="token keyword">:</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;此时再查看博客就正常了。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        //只在桌面版网页启用特效        var windowWidth <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>window<span class="token variable">)</span></span>.width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> 768<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document.write<span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/sakura.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>&emsp;&emsp;常见的转义符有：HTML ISO-8859-1 参考手册</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#33; — 惊叹号</span>" <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#34; &amp;quot; 双引号</span><span class="token comment" spellcheck="true"># &amp;#35; — 数字标志</span>$ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#36; — 美元标志</span>% <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#37; — 百分号</span><span class="token operator">&amp;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#38; &amp;amp;  — &amp;符</span>‘ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#39; — 单引号</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#40; — 小括号左边部分</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#41; — 小括号右边部分</span>* <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#42; — 星号</span>+ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#43; — 加号</span><span class="token operator">&lt;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#60; &amp;lt; 小于号</span><span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#61; — 等于符号</span>- <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#45; &amp;minus; — 减号</span><span class="token operator">></span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#62; &amp;gt; 大于号</span>? <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#63; — 问号</span>@ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#64; — @符</span><span class="token punctuation">[</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#91; --- 中括号左边部分</span>\ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#92; --- 反斜杠</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#93; — 中括号右边部分</span><span class="token punctuation">{</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; — 大括号左边部分</span><span class="token operator">|</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#124; — 竖线</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125; — 大括号右边部分&lt;/pre></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建+美化（巨细版本）</title>
      <link href="/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/"/>
      <url>/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="博客搭建-美化（巨细版本）"><a href="#博客搭建-美化（巨细版本）" class="headerlink" title="博客搭建+美化（巨细版本）"></a><center>博客搭建+美化（巨细版本）</center></h2><h3 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a>一、博客环境搭建</h3><h4 id="1-下载Git和Node-js"><a href="#1-下载Git和Node-js" class="headerlink" title="1.下载Git和Node.js"></a>1.下载Git和Node.js</h4><h5 id="1-Node-js的安装与配置"><a href="#1-Node-js的安装与配置" class="headerlink" title="1.Node.js的安装与配置"></a>1.Node.js的安装与配置</h5><p>&emsp;&emsp;首先去Node.js<a href="https://nodejs.org/zh-cn/">官网</a> 下载node.js的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</p><p>&emsp;&emsp;下载好与电脑系统对应的安装程序后，开始安装流程：</p><p>1.1.1 打开下载好的Node.js安装程序，点击Next，进行下一步的安装；<br><img src="1.jpg" alt="1"></p><p>1.1.2 将”I accept the terms in the License Agreement”前面的复选框勾选，同意安装协议，再点击Next，进行下一步操作；<br><img src="2.jpg" alt="2"></p><p>1.1.3 选择Node.js安装程序的安装位置，在这里我以”C:\Program Files\nodejs”为例，点击Next，进入下一步操作；<br><img src="3.jpg" alt="3"></p><p>1.1.4 选择安装的模块和功能，这里全部安装，并添加到系统环境变量 ，继续点击Next，进入下一步操作；<br><img src="4.jpg" alt="4"></p><p>1.1.5 这一步可以跳过，这个选项的意思是安装一些编译本地模块的工具，比如python，C/C++等，点击Next，进入下一步；<br><img src="5.jpg" alt="5"></p><p>1.1.6 点击”Install”，等待Node.js安装完成；<br><img src="6.jpg" alt="6"></p><p>1.1.7 当看到下图所显示的情况，Node.js就成功安装完毕。<br><img src="7.jpg" alt="7"></p><p>1.1.8 验证安装，并测试Node.js是否加入环境变量，当出现如下图的情况，Node.js安装大功告成。<br><img src="8.jpg" alt="8"></p><p>&emsp;&emsp;如果执行node -v报错的话，那么手动将Node.js的安装路径添加到环境变量中，右击点击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量，在系统变量下找到名为path的变量名，如下图：<br><img src="9.jpg" alt="9"></p><p>&emsp;&emsp;选中path，或者双击，然后将你node.js的安装路径放在path变量值的最后面，如果添加之前path值最后有 英文的分号，则直接将路径添加进去即可，如果没有，先添加分号，然后点击保存，回到桌面，打开cmd（Win+R），执行node -v，看是否成功。</p><p>1.1.9 设置npm的镜像源：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看npm的配置</span><span class="token function">npm</span> config list<span class="token comment" spellcheck="true"># 默认源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org<span class="token comment" spellcheck="true"># 临时改变镜像源</span><span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 永久设置为淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 另一种方式，编辑 ~/.npmrc 加入下面内容</span>registry <span class="token operator">=</span> https://registry.npm.taobao.org</code></pre><p>1.1.10 设置npm的内置路径——&gt;全局模块路径和缓存路径（可选）<br>&emsp;&emsp;如果不改变内置路径也可，除非你的C盘空间足够bigger，这一步可以略过，不改变的话，它的路径在：</p><p>npm包全局目录：C:/Users/[username]/AppData/Roaming/npm/node_modules<br>npm包全局命令目录：C:/Users/[username]/AppData/Roaming/npm<br>npm实际去找全局命令的目录：C:/Users/[username]/.npmrc 文件内容的prefix值<br>npm包全局cache目录：C:/Users/[username]/.npmrc 文件内容的cache值</p><p>&emsp;&emsp;首先在你Node.js的安装位置，新建两个文件夹，node_global和node_cache，我的路径是：</p><pre class=" language-bash"><code class="language-bash">C:\Program Files\nodejs\node_globalC:\Program Files\nodejs\node_cache</code></pre><p>然后分别执行的命令就是：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix<span class="token string">"C:\Program Files\nodejs\node_global"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"C:\Program Files\nodejs\node_cache"</span></code></pre><p>&emsp;&emsp;然后在配置环境变量，右击我的电脑 -&gt;属性 -&gt; 高级系统设置 -&gt; 环境变量同样的位置，在用户变量的地方，找到path变量进行修改，修改值如下图：<br><img src="10.jpg" alt="10"><br><img src="11.jpg" alt="11"></p><p>然后就大功告成了，Node.js就安装完毕了，下面开始Git安装。👇👇👇</p><h4 id="1-2-Git的安装与配置"><a href="#1-2-Git的安装与配置" class="headerlink" title="1.2 Git的安装与配置"></a>1.2 Git的安装与配置</h4><p>&emsp;&emsp;首先就是去<a href="https://git-scm.com/">Git官网</a>下载Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。<br><img src="12.jpg" alt="12"></p><p>1.2.1 下载好Git的安装包，开始安装，打开安装包，出现如图的界面，点击Next：<br><img src="13.jpg" alt="13"></p><p>1.2.2 选择你要安装的位置，我以C盘为例，路径为图中所示，安装到其他位置的话，点击Browse，选择你要安装的位置，然后点击Next，进入下一步：<br><img src="14.jpg" alt="14"></p><p>1.2.3 选择你是否创建桌面快捷放方式，其他默认即可，点击Next，进入下一步：<br><img src="15.jpg" alt="15"></p><p>1.2.4 是否将Git快捷方式的目录加入开是菜单栏<br><img src="16.jpg" alt="16"></p><p>1.2.5 这个是选择文本编辑器的方式，默认是Vim，也可以选择其他的方式，自主选择，在这里我选择的Vim默认方式。选择好文本编辑器的方式后，点击Next，进入下一个流程：<br><img src="17.jpg" alt="17"></p><p>1.2.6 选择安装 Git 时对环境变量PATH的影响，第一种影响较小，第三种会影响到Windows的自带工具，默认勾选中间项，建议不要修改，直接点击 “Next” 继续安装：<br><img src="18.jpg" alt="18"></p><p>1.2.7 选择 Git 在使用 HTTPS 时使用的库，若无特殊需求，可保持默认选项，点击 “Next” 继续安装：<br><img src="19.jpg" alt="19"></p><p>1.2.8 选择提交与拉取记录时，对换行符的处理方式，若无特殊需要，默认选择即可，点击 “Next” 继续安装：<br><img src="20.jpg" alt="20"></p><p>1.2.9 选择模拟终端软件（即命令行窗口软件），若无特殊需要，可默认选择，点击 “Next” 继续安装：<br><img src="21.jpg" alt="21"></p><p>1.2.10 最新功能的询问，若不想尝试尚未保证稳定性的新功能，默认不勾选，点击 “Install” 即可完成安装：<br><img src="22.jpg" alt="22"></p><p>1.2.11 安装完成<br><img src="23.jpg" alt="23"></p><p>1.2.12 回到桌面，点击鼠标右键，会出现两个选项Git GUI Here和Git Bash Here，在打开Cmd(Win+R)，分别输入git和git –version，如果出现如下图的情况，即安装成功！<br><img src="24.jpg" alt="24"><br><img src="25.jpg" alt="25"></p><h4 id="1-3-修改配置文件要用到的软件："><a href="#1-3-修改配置文件要用到的软件：" class="headerlink" title="1.3 修改配置文件要用到的软件："></a>1.3 修改配置文件要用到的软件：</h4><p>&emsp;&emsp;Visual Studio Code <a href="https://visualstudio.microsoft.com/zh-hans/">官网下载</a></p><h3 id="二、Github注册以及Github-Pages创建"><a href="#二、Github注册以及Github-Pages创建" class="headerlink" title="二、Github注册以及Github Pages创建"></a>二、Github注册以及Github Pages创建</h3><h4 id="打开Github官网"><a href="#打开Github官网" class="headerlink" title="打开Github官网"></a>打开Github<a href="https://github.com/">官网</a></h4><p>&emsp;&emsp;点击右上角的Sign Up ，然后在出现的页面上填写你的相关信息，进行注册：<br><img src="26.jpg" alt="26"><br><img src="27.jpg" alt="27"><br><img src="28.jpg" alt="28"></p><p>&emsp;&emsp;验证完成后，点击Next：Select a plan，会出现如上图的验证界面，同理，只需要将其中的动物调整为正向显示即可。接着会出现下图的界面，选择Free，下方的两个选项可选可不选，点击Continue继续：<br><img src="29.jpg" alt="29"></p><p>&emsp;&emsp;这时Github会给你发一封邮件，验证一下即可，验证过后才可以创建库。<br><img src="30.jpg" alt="30"></p><p>&emsp;&emsp;验证完成后，开始创建库，如下图所示，仓库名创建格式必须为：&lt;用户名&gt;.github.io，Description为描述仓库，自定义写，填写必要的描述，也可不填。勾选Initialize this repository with a README点击Creat repository进行创建。<br><img src="31.jpg" alt="31"></p><p>&emsp;&emsp;然后就会出现如图所示的界面，即仓库创建成功！<br><img src="32.jpg" alt="32"></p><p>&emsp;&emsp;我们来测试一下，点击Create new file，出现如下界面，然后命名文件名为index.html，在填写如图的内容，再点击Commit new file，即创建成功，然后打开一个新的网页，输入网址https://&lt;你的用户名&gt;.github.io，即可以看见一个新的网页，其中的内容就是你写的内容。<br><img src="33.jpg" alt="33"><br><img src="34.jpg" alt="34"><br><img src="35.jpg" alt="35"></p><p>&emsp;&emsp;至此，Github的注册以及Github Pages已经创建完成了。</p><h3 id="三、配置Git用户名和邮箱"><a href="#三、配置Git用户名和邮箱" class="headerlink" title="三、配置Git用户名和邮箱"></a>三、配置Git用户名和邮箱</h3><p>&emsp;&emsp;在桌面点击鼠标右键，点击Git Bash Here，会出现一个界面如下图所示：<br><img src="36.jpg" alt="36"></p><p>&emsp;&emsp;然后分别输入下面的两个命令，并回车：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"此处填写你注册时的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"此处填写你注册时的邮箱"</span><span class="token comment" spellcheck="true"># 一般只要不报错，可以跳过下面寻找.gitconfig文件</span></code></pre><p>&emsp;&emsp;然后找到.gitconfig文件，文件存放位置在C:/Users/[username]/.gitconfig（未找到的话，请开启显示隐藏文件的功能），用编辑器打开，看到如下图所示的内容，即配置成功！<br><img src="37.jpg" alt="37"></p><h3 id="四、本地安装以及发布"><a href="#四、本地安装以及发布" class="headerlink" title="四、本地安装以及发布"></a>四、本地安装以及发布</h3><h4 id="1-安装到本地"><a href="#1-安装到本地" class="headerlink" title="1.安装到本地"></a>1.安装到本地</h4><p>&emsp;&emsp;首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blogtest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择Git Bash Here，然后依次输入如下命令，：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hexo框架的安装</span><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token comment" spellcheck="true"># 等上一个命令完成后，在输入下面的命令</span>hexo init <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span>  <span class="token comment" spellcheck="true">#初始化文件夹</span><span class="token function">cd</span> <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true"># 安装博客所需要的依赖文件</span></code></pre><p><img src="38.jpg" alt="38"><br><img src="39.jpg" alt="39"></p><p>&emsp;&emsp;等待运行完成，此时文件夹中多了许多文件。<br>&emsp;&emsp;注意：后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。<br>&emsp;&emsp;此时Hexo框架的本地搭建已经完成了。我们来运行一下看看，命令行依次输入以下命令 :</p><pre class=" language-bash"><code class="language-bash">hexo ghexo s</code></pre><p><img src="40.jpg" alt="40"></p><p>&emsp;&emsp;浏览器中打开<a href="http://localhost:4000/">http://localhost:4000/</a>，可以看到一个网页，说明Hexo博客已经成功在本地运行。<br><img src="41.jpg" alt="41"></p><h4 id="2-本地博客发布到Github-Pages"><a href="#2-本地博客发布到Github-Pages" class="headerlink" title="2. 本地博客发布到Github Pages"></a>2. 本地博客发布到Github Pages</h4><p>&emsp;&emsp;之前的步骤中，我们已经完成了对Github账户的注册以及Github Pages的创建，接下来是将本地博客发布至Github Pages。</p><p>2.1 首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>&emsp;&emsp;紧接着，将本地目录与GitHub关联起来，输入下面的命令行：</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span></code></pre><p>&emsp;&emsp;输入后一直回车，然后在C:/Users/[username]目录下找到名为.ssh的文件夹， 文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本编辑器打开id_rsa.pub，复制里面的的内容。 然后打开Github，点击右上角的头像 Settings 选择SSH and GPG keys<br><img src="42.jpg" alt="42"></p><p>&emsp;&emsp;点击New SSH key 将之前复制的内容粘帖到Key的框中。 上面的Title可以随意，点击Add SSH key 完成添加。<br><img src="43.jpg" alt="43"></p><p>2.2 然后回到Git的命令行界面，测试一下是否与GitHub连接成功。输入下面的命令行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>&emsp;&emsp;点击回车，然后会出现一个询问内容，输入yes，回车，会出现一段内容，Hi <account name>! You’ve successfully authenticated, but GitHub doesnot provide shell access.。 说明连接成功。此处这个<account name>应该是你Github的用户名。</p><p>2.3 进入博客站点目录，用文本编辑器打开_config.yml，这个_config.yml是博客的配置文件，在以后的博客修改，如个性化修改，博客SEO优化等都会使用到，&emsp;&emsp;修改如下图的几个地方：</p><pre class=" language-bash"><code class="language-bash">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种   timezone: 时区</code></pre><p><img src="44.jpg" alt="44"></p><p>&emsp;&emsp;滑到文件最底部，有一个deploy，在deploy下面添加一个repo项 ，一个branch项。填入如下代码，并如下图所示：</p><pre class=" language-bash"><code class="language-bash">type: <span class="token function">git</span>repo: git@github.com:Github用户名/github用户名.github.io.git  //也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            branch: master</code></pre><p><img src="45.jpg" alt="45"></p><p>2.4 最后就是生成页面，并发布至Github Pages，执行如下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Hexo会根据配置文件渲染出一套静态页面</span>hexo g<span class="token comment" spellcheck="true"># 将上一步渲染出的一系列文件上传至至Github Pages</span>hexo d<span class="token comment" spellcheck="true"># 也可以直接输入此命令，直接完成渲染和上传</span>hexo g -d</code></pre><p>&emsp;&emsp;上传完成后，在浏览器中打开https://&lt;用户名&gt;.github.io，查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。</p><h3 id="五、hexo博客主题安装与修改"><a href="#五、hexo博客主题安装与修改" class="headerlink" title="五、hexo博客主题安装与修改"></a>五、hexo博客主题安装与修改</h3><p> QQ 交流群(及文件下载):478404205</p><h4 id="1-主题下载与安装"><a href="#1-主题下载与安装" class="headerlink" title="1. 主题下载与安装"></a>1. 主题下载与安装</h4><p>&emsp;&emsp;点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">网站</a> 下载 master 分支的最新稳定版的代码，解压缩后，将 hexo-theme-matery 的文件夹复制到你 Hexo 的 themes 文件夹中即可。</p><p>&emsp;&emsp;当然你也可以在你的站点目录文件夹下使用 git clone 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本(不定期更新优化)，自主选择版本。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery themes/matery     <span class="token comment" spellcheck="true"># 稳定版</span><span class="token function">git</span> clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   <span class="token comment" spellcheck="true">#最新版(不定期进行优化更新)</span></code></pre><h4 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2. 主题配置"></a>2. 主题配置</h4><h5 id="2-1-切换主题"><a href="#2-1-切换主题" class="headerlink" title="2.1 切换主题"></a>2.1 切换主题</h5><p>&emsp;&emsp;<strong>注意：</strong>首先需要明白什么是站点配置文件，什么是主题配置文件，站点配置文件就是根目录下的配置文件，比如我的博客文件在F:\blog下，那么站点配置文件就是F:\blog_config.yml，主题配置文件就是F:\blog\themes\matery_config.yml。</p><p>&emsp;&emsp;另外注意，配置文件中的标点符号不要出现中文格式的标点符号，不然运行会出错。</p><p>&emsp;&emsp;主题下载完成后，将站点配置文件中的theme值修改为你下载主题的文件名，此处为matery，那么值就修改为theme: matery。</p><p>&emsp;&emsp;一些站点配置文件的其他地方的修改：</p><p>&emsp;&emsp;语言选择：如果为中文用户，则在language:后添加值zh-CN，如果不修改，默认为英语；<br>&emsp;&emsp;网址修改：url:的值为你的网址名，如<a href="http://xxxx.github.io,如果有域名,则修改为你的域名即可,至于有关域名的修改解析,后面我会说到,这里先不说了./">http://xxxx.github.io，如果有域名，则修改为你的域名即可，至于有关域名的修改解析，后面我会说到，这里先不说了。</a><br>&emsp;&emsp;站点配置文件有个per_page属性，建议修改为6的倍数，这样网站在适应设备时，有较好的显示效果。</p><h5 id="2-2-新建标签-tags-页面"><a href="#2-2-新建标签-tags-页面" class="headerlink" title="2.2 新建标签 tags 页面"></a>2.2 新建标签 tags 页面</h5><p>tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags/index.md 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>&emsp;&emsp;编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: tagsdate: 2018-09-30 18:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---</code></pre><h5 id="2-3-新建分类-categories-页面"><a href="#2-3-新建分类-categories-页面" class="headerlink" title="2.3 新建分类 categories 页面"></a>2.3 新建分类 categories 页面</h5><p>&emsp;&emsp;categories 页是用来展示所有分类的页面，如果在你的博客 source 目录下还没有 categories/index.md 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>&emsp;&emsp;编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: categoriesdate: 2018-09-30 17:25:30type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---</code></pre><h5 id="2-4-新建关于我-about-页面"><a href="#2-4-新建关于我-about-页面" class="headerlink" title="2.4 新建关于我 about 页面"></a>2.4 新建关于我 about 页面</h5><p>&emsp;&emsp;about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about/index.md 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>&emsp;&emsp;编辑你刚刚新建的页面文件 /source/about/index.md，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: aboutdate: 2018-09-30 17:25:30type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---</code></pre><h5 id="2-5-新建留言板-contact-页面-可选"><a href="#2-5-新建留言板-contact-页面-可选" class="headerlink" title="2.5 新建留言板 contact 页面 (可选)"></a>2.5 新建留言板 contact 页面 (可选)</h5><p>&emsp;&emsp;contact 页是用来展示留言板信息的页面，如果在你的博客 source 目录下还没有 contact/index.md 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>&emsp;&emsp;编辑你刚刚新建的页面文件 /source/contact/index.md，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: contactdate: 2018-09-30 17:25:30type: <span class="token string">"contact"</span>layout: <span class="token string">"contact"</span>---</code></pre><p>&emsp;&emsp;注：本留言板功能依赖于第三方评论系统，请激活你的评论系统才有效果。并且在主题的 _config.yml 文件中，第 19 至 21 行的“菜单”配置，取消关于留言板的注释即可。</p><h5 id="2-6-新建友情链接-friends-页面-可选"><a href="#2-6-新建友情链接-friends-页面-可选" class="headerlink" title="2.6 新建友情链接 friends 页面 (可选)"></a>2.6 新建友情链接 friends 页面 (可选)</h5><p>friends 页是用来展示友情链接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>&emsp;&emsp;编辑你刚刚新建的页面文件 /source/friends/index.md，至少需要以下内容：</p><pre class=" language-bash"><code class="language-bash">---title: friendsdate: 2018-12-12 21:25:30type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---</code></pre><p>&emsp;&emsp;同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre class=" language-bash"><code class="language-bash">  <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"码酱"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://luokangyuan.com/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"闪烁之狐"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://blinkfox.github.io/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"ja_rome"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h5 id="2-7-菜单导航配置"><a href="#2-7-菜单导航配置" class="headerlink" title="2.7 菜单导航配置"></a>2.7 菜单导航配置</h5><h6 id="2-7-1-配置基本菜单导航的名称、路径url和图标icon"><a href="#2-7-1-配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="2.7.1 配置基本菜单导航的名称、路径url和图标icon."></a>2.7.1 配置基本菜单导航的名称、路径url和图标icon.</h6><p>1.菜单导航名称可以是中文也可以是英文(如：Index或主页)<br>2.图标icon 可以在Font Awesome 中查找</p><pre class=" language-bash"><code class="language-bash">  menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h6 id="2-7-2-二级菜单配置方法"><a href="#2-7-2-二级菜单配置方法" class="headerlink" title="2.7.2. 二级菜单配置方法"></a>2.7.2. 二级菜单配置方法</h6><p>&emsp;&emsp;如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><p>1.在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children)<br>2.在children下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 -.<br>4.注意缩进格式</p><pre class=" language-bash"><code class="language-bash">  menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><h5 id="2-8-添加emoji表情支持（可选的）"><a href="#2-8-添加emoji表情支持（可选的）" class="headerlink" title="2.8 添加emoji表情支持（可选的）"></a>2.8 添加emoji表情支持（可选的）</h5><p>&emsp;&emsp;本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：:smile:）转变成会跳跃的emoji表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>&emsp;&emsp;在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">  githubEmojis:  enable: <span class="token boolean">true</span>  className: github-emoji  inject: <span class="token boolean">true</span>  styles:  customEmojis:</code></pre><p>&emsp;&emsp;执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后就可以在文章中对应位置看到你用emoji语法写的表情了。</p><h5 id="2-9-代码高亮"><a href="#2-9-代码高亮" class="headerlink" title="2.9 代码高亮"></a>2.9 代码高亮</h5><p>&emsp;&emsp;由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>&emsp;&emsp;然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre class=" language-bash"><code class="language-bash">prism_plugin:  mode: <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme: <span class="token string">'tomorrow'</span>  line_number: <span class="token boolean">false</span>    <span class="token comment" spellcheck="true"># default false</span>  custom_css:</code></pre><h5 id="2-10-搜索"><a href="#2-10-搜索" class="headerlink" title="2.10 搜索"></a>2.10 搜索</h5><p>&emsp;&emsp;本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>&emsp;&emsp;在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">search:  path: search.xml  field: post</code></pre><h5 id="2-11-中文链接转拼音（可选的）"><a href="#2-11-中文链接转拼音（可选的）" class="headerlink" title="2.11 中文链接转拼音（可选的）"></a>2.11 中文链接转拼音（可选的）</h5><p>&emsp;&emsp;如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 &emsp;&emsp;hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>&emsp;&emsp;安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>&emsp;&emsp;在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">permalink_pinyin:  enable: <span class="token boolean">true</span>  separator: <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><p><strong>注：</strong>除了此插件外，hexo-abbrlink 插件也可以生成非中文的链接。</p><h5 id="2-12-文章字数统计插件（可选的）"><a href="#2-12-文章字数统计插件（可选的）" class="headerlink" title="2.12 文章字数统计插件（可选的）"></a>2.12 文章字数统计插件（可选的）</h5><p>&emsp;&emsp;如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。</p><p>&emsp;&emsp;安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>&emsp;&emsp;然后只需在本主题下的 _config.yml 文件中，激活以下配置项即可：</p><pre class=" language-bash"><code class="language-bash">wordCount:  enable: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  postWordCount: <span class="token boolean">true</span>  min2read: <span class="token boolean">true</span>  totalCount: <span class="token boolean">true</span></code></pre><h5 id="2-13-添加-RSS-订阅支持（可选的）"><a href="#2-13-添加-RSS-订阅支持（可选的）" class="headerlink" title="2.13 添加 RSS 订阅支持（可选的）"></a>2.13 添加 RSS 订阅支持（可选的）</h5><p>&emsp;&emsp;本主题中还使用到了 hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>&emsp;&emsp;在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre class=" language-bash"><code class="language-bash">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: <span class="token string">' '</span>  order_by: -date</code></pre><p>&emsp;&emsp;执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。</p><h5 id="2-14-添加-DaoVoice-在线聊天功能（可选的）"><a href="#2-14-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="2.14 添加 DaoVoice 在线聊天功能（可选的）"></a>2.14 添加 DaoVoice 在线聊天功能（可选的）</h5><p>&emsp;&emsp;前往 <a href="https://www.daocloud.io/">DaoVoice</a>官网注册并且获取 app_id，并将 app_id 填入主题的 _config.yml 文件中</p><h5 id="2-15-添加-Tidio-在线聊天功能（可选的）"><a href="#2-15-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="2.15 添加 Tidio 在线聊天功能（可选的）"></a>2.15 添加 Tidio 在线聊天功能（可选的）</h5><p>&emsp;&emsp;前往 [Tidio] (<a href="https://www.tidio.com/)%E5%AE%98%E7%BD%91%E6%B3%A8%E5%86%8C%E5%B9%B6%E4%B8%94%E8%8E%B7%E5%8F%96">https://www.tidio.com/)官网注册并且获取</a> Public Key，并将 Public Key 填入主题的 _config.yml 文件中。</p><h5 id="2-16-修改页脚"><a href="#2-16-修改页脚" class="headerlink" title="2.16 修改页脚"></a>2.16 修改页脚</h5><p>&emsp;&emsp;页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><h5 id="2-17-修改社交链接"><a href="#2-17-修改社交链接" class="headerlink" title="2.17 修改社交链接"></a>2.17 修改社交链接</h5><p>&emsp;&emsp;在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.socialLink.github<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.github %>"</span> class<span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data-tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data-position<span class="token operator">=</span><span class="token string">"top"</span> data-delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fab fa-github"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>    <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span></code></pre><p>&emsp;&emsp;其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考：</p><p>Facebook: fab fa-facebook<br>Twitter: fab fa-twitter<br>Google-plus: fab fa-google-plus<br>Linkedin: fab fa-linkedin<br>Tumblr: fab fa-tumblr<br>Medium: fab fa-medium<br>Slack: fab fa-slack<br>Sina Weibo: fab fa-weibo<br>Wechat: fab fa-weixin<br>QQ: fab fa-qq<br>Zhihu: fab fa-zhihu<br>&emsp;&emsp;<strong>注意:</strong> 本主题中使用的 Font Awesome 版本为 5.11.0。</p><h5 id="2-18-修改打赏的二维码图片"><a href="#2-18-修改打赏的二维码图片" class="headerlink" title="2.18 修改打赏的二维码图片"></a>2.18 修改打赏的二维码图片</h5><p>&emsp;&emsp;在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h5 id="2-19-配置音乐播放器（可选的）"><a href="#2-19-配置音乐播放器（可选的）" class="headerlink" title="2.19 配置音乐播放器（可选的）"></a>2.19 配置音乐播放器（可选的）</h5><p>&emsp;&emsp;要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>&emsp;&emsp;首先，在你的博客 source 目录下的 _data 目录（没有的话就新建一个）中新建 musics.json 文件，文件内容如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"五月雨变奏电音"</span>,    <span class="token string">"artist"</span><span class="token keyword">:</span> <span class="token string">"AnimeVibe"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span>,    <span class="token string">"cover"</span><span class="token keyword">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"Take me hand"</span>,    <span class="token string">"artist"</span><span class="token keyword">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"/medias/music/music2.mp3"</span>,    <span class="token string">"cover"</span><span class="token keyword">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"Shape of You"</span>,    <span class="token string">"artist"</span><span class="token keyword">:</span> <span class="token string">"J.Fla"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span>,    <span class="token string">"cover"</span><span class="token keyword">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>&emsp;&emsp;<strong>注：</strong>以上 JSON 中的属性：name、artist、url、cover 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p><p>&emsp;&emsp;然后，在主题的 _config.yml 配置文件中激活配置即可：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span>music:  enable: <span class="token boolean">true</span>  showTitle: <span class="token boolean">false</span>  title: 听听音乐  fixed: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  autoplay: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 是否自动播放</span>  theme: <span class="token string">'#42b983'</span>  loop: <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  order: <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  preload: <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  volume: 0.7 <span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  listFolded: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 列表默认折叠</span>  listMaxHeight: <span class="token comment" spellcheck="true"># 列表最大高度</span></code></pre><h4 id="3-文章-Front-matter-介绍"><a href="#3-文章-Front-matter-介绍" class="headerlink" title="3. 文章 Front-matter 介绍"></a>3. 文章 Front-matter 介绍</h4><p>&emsp;&emsp;Front-matter 选项详解<br>&emsp;&emsp;Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><p>&emsp;&emsp;您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br>&emsp;&emsp;以下为文章的 Front-matter 示例。</p><p>&emsp;&emsp;最简示例</p><pre class=" language-bash"><code class="language-bash">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><p>&emsp;&emsp;最全示例</p><pre class=" language-bash"><code class="language-bash">---title: typora-vue-theme主题介绍date: 2022-05-02 09:25:00author: CrazyYuimg: /source/images/xxx.jpgtop: <span class="token boolean">true</span>cover: <span class="token boolean">true</span>coverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: <span class="token boolean">false</span>mathjax: <span class="token boolean">false</span>summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h4 id="4-效果截图"><a href="#4-效果截图" class="headerlink" title="4. 效果截图"></a>4. 效果截图</h4><p>&emsp;&emsp;最新版本进行了优化更新，效果图与最初的效果图有差别，下面的图不是最新版本的。<br><img src="46.jpg" alt="46"><br><img src="47.jpg" alt="47"><br><img src="48.jpg" alt="48"><br><img src="49.jpg" alt="49"><br><img src="50.jpg" alt="50"></p><h4 id="5-自定制修改"><a href="#5-自定制修改" class="headerlink" title="5. 自定制修改"></a>5. 自定制修改</h4><p>&emsp;&emsp;<strong>我认为个人博客应该都有自己的风格和特色。</strong>如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 _config.yml 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h5 id="5-1-修改主题颜色"><a href="#5-1-修改主题颜色" class="headerlink" title="5.1 修改主题颜色"></a>5.1 修改主题颜色</h5><p>&emsp;&emsp;在主题文件的 /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色：</p><pre class=" language-bash"><code class="language-bash">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color <span class="token punctuation">{</span>    background-image: linear-gradient<span class="token punctuation">(</span>to right, <span class="token comment" spellcheck="true">#4cbf30 0%, #0f9d58 100%);</span><span class="token punctuation">}</span>/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow <span class="token punctuation">{</span>   /* 动态切换背景颜色. */<span class="token punctuation">}</span>@keyframes rainbow <span class="token punctuation">{</span>    /* 动态切换背景颜色. */<span class="token punctuation">}</span></code></pre><h5 id="5-2-修改-banner-图和文章特色图"><a href="#5-2-修改-banner-图和文章特色图" class="headerlink" title="5.2 修改 banner 图和文章特色图"></a>5.2 修改 banner 图和文章特色图</h5><p>&emsp;&emsp;你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 <script></script> 代码中：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">$(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span>.css<span class="token punctuation">(</span><span class="token string">'background-image'</span>, <span class="token string">'url(/medias/banner/'</span> + new Date<span class="token punctuation">(</span><span class="token punctuation">)</span>.getDay<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><p>&emsp;&emsp;如果想改为每小时或者每分钟切换banner图的话，需要将getDay()改为getHours()或者getMinutes()即可。</p><h5 id="5-3-修改网站相关信息"><a href="#5-3-修改网站相关信息" class="headerlink" title="5.3 修改网站相关信息"></a>5.3 修改网站相关信息</h5><p>&emsp;&emsp;首先看一个图，如下：<br><img src="51.jpg" alt="51"></p><p>&emsp;&emsp;紧接着放上相关的配置文件信息：</p><p>1.网站信息的修改</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是根目录下的配置文件信息</span>title: CrazyYu<span class="token string">'s Blog  #这是网站标题subtitle: '</span>Smile Life<span class="token string">' #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description: '</span>个人博客<span class="token string">'  #网站描述keywords: [HTML, CSS, JavaScript, JQuery, React, Vue.js等]  #网站的关键词author: Crazy Yuchi #作者，文章版权所显示的language: zh-cn #网站语言，不填写，默认为英文timezone: '</span>' <span class="token comment" spellcheck="true">#时区，可以不填写</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是主题配置文件的相关信息</span><span class="token comment" spellcheck="true"># 配置网站favicon和网站LOGO</span><span class="token comment" spellcheck="true"># 可以用的CDN，也可以使用本地文件</span>favicon: /favicon.pnglogo: /medias/logo.png<span class="token comment" spellcheck="true"># 网站副标题，打字效果</span><span class="token comment" spellcheck="true"># 如果有符号 ‘ ，请在 ’ 前面加上 \</span>subtitle:   enable: <span class="token boolean">true</span>  loop: <span class="token boolean">true</span> <span class="token comment" spellcheck="true"># 是否循环</span>  showCursor: <span class="token boolean">true</span> <span class="token comment" spellcheck="true"># 是否显示光标</span>  startDelay: 300 <span class="token comment" spellcheck="true"># 开始延迟</span>  typeSpeed: 100 <span class="token comment" spellcheck="true"># 打字速度</span>  backSpeed: 50 <span class="token comment" spellcheck="true"># 删除速度</span>  sub1: 从来没有真正的绝境, 只有心灵的迷途  sub2: Never really desperate, only the lost of the soul</code></pre><p>&emsp;&emsp;<strong>注意：</strong></p><p>&emsp;&emsp;网站打字效果副标题默认有两个，即sub1和sub2，如果想写多个，则需要修改两处地方，首先修改配置文件，如上面所示，在sub1和sub2后面继续添加即可，然后在去主题目录下的layout文件夹下的_partial文件夹，修改bg-cover-content.ejs文件，大约在12行左右，如下面所示：</p><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"description center-align"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.subtitle.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>         <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"subtitle"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span>         <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/typed.js@2.0.11"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>        <span class="token operator">&lt;</span>script<span class="token operator">></span>            var typed <span class="token operator">=</span> new Typed<span class="token punctuation">(</span><span class="token string">"#subtitle"</span>, <span class="token punctuation">{</span>                strings: <span class="token punctuation">[</span><span class="token string">'&lt;%= theme.subtitle.sub1 %>'</span>,                          <span class="token string">'&lt;%= theme.subtitle.sub2 %>'</span>,                          <span class="token string">'&lt;%= theme.subtitle.sub3 %>'</span>,                          <span class="token string">'&lt;%= theme.subtitle.sub4 %>'</span>,                          <span class="token string">'&lt;%= theme.subtitle.sub5 %>'</span>,                          <span class="token string">'&lt;%= theme.subtitle.sub6 %>'</span><span class="token punctuation">]</span>,                 startDelay: <span class="token operator">&lt;</span>%<span class="token operator">=</span> theme.subtitle.startDelay %<span class="token operator">></span>,                 typeSpeed: <span class="token operator">&lt;</span>%<span class="token operator">=</span> theme.subtitle.typeSpeed %<span class="token operator">></span>,                 loop: <span class="token operator">&lt;</span>%<span class="token operator">=</span> theme.subtitle.loop %<span class="token operator">></span>,                    backSpeed: <span class="token operator">&lt;</span>%<span class="token operator">=</span> theme.subtitle.backSpeed %<span class="token operator">></span>,                 showCursor: <span class="token operator">&lt;</span>%<span class="token operator">=</span> theme.subtitle.showCursor %<span class="token operator">></span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&lt;</span>/script<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> %<span class="token operator">></span>            <span class="token operator">&lt;</span>%<span class="token operator">=</span> config.description %<span class="token operator">></span>      <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><p>2.社交链接的修改<br>&emsp;&emsp;默认的配置信息为：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 首页 banner 中的第二行个人信息配置，留空即不启用</span>socialLink:  github:  https://github.com/CrazyYuchi  email: 931846427@qq.com  facebook: <span class="token comment" spellcheck="true"># https://www.facebook.com/profile.php?id=100080256978101</span>  twitter: <span class="token comment" spellcheck="true"># https://twitter.com/</span>  qq: 931846427  weibo: <span class="token comment" spellcheck="true"># https://weibo.com//u/5629150839</span>  zhihu: <span class="token comment" spellcheck="true"># https://www.zhihu.com/</span>  rss: <span class="token boolean">true</span> <span class="token comment" spellcheck="true"># true、false</span></code></pre><p>&emsp;&emsp;如果想添加简书，CSDN，掘金，博客园等等，需要在主题配置文件添加相关配置，可以进行如下配置(例如)：</p><pre class=" language-bash"><code class="language-bash">socialLink:  qq: 931846427  weixin: ***.png  github: https://github.com/CrazyYuchi  email: mailto:931846427@qq.com  facebook: <span class="token comment" spellcheck="true"># https://www.facebook.com/xxx</span>  twitter: <span class="token comment" spellcheck="true"># https://twitter.com/xxx</span>  weibo: <span class="token comment" spellcheck="true"># https://weibo.com/xxx</span>  zhihu: https://www.zhihu.com/people/xuan-tian-40-64/activities  juejin: https://juejin.im/user/5a902053f265da4e7527ae71/activities  csdn: https://blog.csdn.net/victoryxa  jianshu: https://www.jianshu.com/u/3b3856869772  cnblogs: https://www.cnblogs.com/yafine/  rss: <span class="token boolean">true</span> <span class="token comment" spellcheck="true"># true、false</span></code></pre><p>&emsp;&emsp;其中的weixin我是用的图片链接，会跳转到一个新的标签页，之后还需要修改ejs文件，文件在主题目录下的layout文件夹下的_partial文件夹，修改social-link.ejs，添加相关的配置，个人添加的配置如下(例如)：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.socialLink.jianshu<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.jianshu %>"</span> class<span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data-tooltip<span class="token operator">=</span><span class="token string">"关注我的简书: &lt;%= theme.socialLink.jianshu %>"</span> data-position<span class="token operator">=</span><span class="token string">"top"</span> data-delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fab fa-jianshu"</span><span class="token operator">></span>简<span class="token operator">&lt;</span>/i<span class="token operator">></span>    <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.socialLink.csdn<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.csdn %>"</span> class<span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data-tooltip<span class="token operator">=</span><span class="token string">"关注我的CSDN: &lt;%= theme.socialLink.csdn %>"</span> data-position<span class="token operator">=</span><span class="token string">"top"</span> data-delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fab fa-csdn"</span><span class="token operator">></span>C<span class="token operator">&lt;</span>/i<span class="token operator">></span>    <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.socialLink.juejin<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.juejin %>"</span> class<span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data-tooltip<span class="token operator">=</span><span class="token string">"关注我的掘金: &lt;%= theme.socialLink.juejin %>"</span> data-position<span class="token operator">=</span><span class="token string">"top"</span> data-delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fab fa-juejin"</span><span class="token operator">></span>掘<span class="token operator">&lt;</span>/i<span class="token operator">></span>    <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.socialLink.cnblogs<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.cnblogs %>"</span> class<span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data-tooltip<span class="token operator">=</span><span class="token string">"关注我的博客园: &lt;%= theme.socialLink.cnblogs %>"</span> data-position<span class="token operator">=</span><span class="token string">"top"</span> data-delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fab fa-juejin"</span><span class="token operator">></span>博<span class="token operator">&lt;</span>/i<span class="token operator">></span>    <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.socialLink.weixin<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.weixin %>"</span> class<span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data-tooltip<span class="token operator">=</span><span class="token string">"微信联系我: &lt;%= theme.socialLink.weixin %>"</span> data-position<span class="token operator">=</span><span class="token string">"top"</span> data-delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fab fa-weixin"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>    <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span></code></pre><h3 id="六、hexo博客美化（DIY）"><a href="#六、hexo博客美化（DIY）" class="headerlink" title="六、hexo博客美化（DIY）"></a>六、hexo博客美化（DIY）</h3><p>&emsp;&emsp;主题DIY会涉及到js文件和css文件等的修改，个人建议新增的js文件放在themes/matery/layout/layout.ejs这个文件下，这样会稍微加快博客访问的速度。不想花钱​最好的方式是使用cdn.jsdeliver。以后会说到。</p><h4 id="1-动态标题"><a href="#1-动态标题" class="headerlink" title="1. 动态标题"></a>1. 动态标题</h4><p>&emsp;&emsp;先放上效果图再说：<br><img src="52.jpg" alt="52"> <img src="53.jpg" alt="53"><br>&emsp;&emsp;实现方法，直接在themes/matery/layout/layout.ejs文件中添加如下代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    var OriginTitile<span class="token operator">=</span>document.title,st<span class="token punctuation">;</span>    document.addEventListener<span class="token punctuation">(</span><span class="token string">"visibilitychange"</span>,function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document.hidden?<span class="token punctuation">(</span>document.title<span class="token operator">=</span><span class="token string">"ヽ(●-`Д´-)ノ你要玩捉迷藏嘛"</span>,clearTimeout<span class="token punctuation">(</span>st<span class="token punctuation">))</span>:<span class="token punctuation">(</span>document.title<span class="token operator">=</span><span class="token string">"(Ő∀Ő3)ノ好哦！"</span>,st<span class="token operator">=</span>setTimeout<span class="token punctuation">(</span>function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document.title<span class="token operator">=</span>OriginTitile<span class="token punctuation">}</span>,3e3<span class="token punctuation">))</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="2-修改导航栏颜色以及透明效果"><a href="#2-修改导航栏颜色以及透明效果" class="headerlink" title="2. 修改导航栏颜色以及透明效果"></a>2. 修改导航栏颜色以及透明效果</h4><p>&emsp;&emsp;打开themes/matery/source/css/matery.css文件，大约在250行，有一个.bg-color属性，修改其属性值即可，代码如下：</p><pre class=" language-bash"><code class="language-bash">.bg-color <span class="token punctuation">{</span>    background-image: linear-gradient<span class="token punctuation">(</span>to right, <span class="token comment" spellcheck="true">#4cbf30 0%, #0f9d58 100%); //修改成自己喜欢的颜色值</span>    opacity: 0.8<span class="token punctuation">;</span>  //透明效果 值范围 0~1，看情况自己修改<span class="token punctuation">}</span></code></pre><h4 id="3-添加动态诗词"><a href="#3-添加动态诗词" class="headerlink" title="3. 添加动态诗词"></a>3. 添加动态诗词</h4><p>&emsp;&emsp;采用的是今日诗词，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有API文档，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，在/themes/matery/layout/_partial/head.ejs添加下面的一行代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://sdk.jinrishici.com/v2/browser/jinrishici.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>&emsp;&emsp;然后再将/themes/matery/layout/_partial/bg-cover-content.ejs中的&lt;%= config.description %&gt;修改为把&lt;%= config.description %&gt;改为&lt;%- ‘<span id="jinrishici-sentence">正在加载今日诗词….</span>‘ %&gt;，这个使用前提是将主题配置文件的subtitle的值改为false。</p><h4 id="4-鼠标点击文字特效"><a href="#4-鼠标点击文字特效" class="headerlink" title="4. 鼠标点击文字特效"></a>4. 鼠标点击文字特效</h4><p>&emsp;&emsp;实现方法，引入js文件，在主题文件下的/source/js/下新建click_show_text.js，其代码如下：</p><pre class=" language-bash"><code class="language-bash">var a_idx <span class="token operator">=</span> 0<span class="token punctuation">;</span>jQuery<span class="token punctuation">(</span>document<span class="token punctuation">)</span>.ready<span class="token punctuation">(</span>function <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">$(</span><span class="token string">"body"</span><span class="token punctuation">)</span>.click<span class="token punctuation">(</span>function <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var a <span class="token operator">=</span> new Array<span class="token punctuation">(</span><span class="token string">"富强"</span>, <span class="token string">"民主"</span>, <span class="token string">"文明"</span>, <span class="token string">"和谐"</span>, <span class="token string">"自由"</span>, <span class="token string">"平等"</span>, <span class="token string">"公正"</span>, <span class="token string">"法治"</span>, <span class="token string">"爱国"</span>, <span class="token string">"敬业"</span>, <span class="token string">"诚信"</span>, <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        var <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token punctuation">$(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span>.text<span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx + 1<span class="token punctuation">)</span> % a.length<span class="token punctuation">;</span>        var x <span class="token operator">=</span> e.pageX,            y <span class="token operator">=</span> e.pageY<span class="token punctuation">;</span>        <span class="token variable">$i</span>.css<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"z-index"</span><span class="token keyword">:</span> 5,            <span class="token string">"top"</span><span class="token keyword">:</span> y - 20,            <span class="token string">"left"</span><span class="token keyword">:</span> x,            <span class="token string">"position"</span><span class="token keyword">:</span> <span class="token string">"absolute"</span>,            <span class="token string">"font-weight"</span><span class="token keyword">:</span> <span class="token string">"bold"</span>,            <span class="token string">"color"</span><span class="token keyword">:</span> <span class="token string">"#FF0000"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">$(</span><span class="token string">"body"</span><span class="token punctuation">)</span>.append<span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i</span>.animate<span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">"top"</span><span class="token keyword">:</span> y - 180,                <span class="token string">"opacity"</span><span class="token keyword">:</span> 0            <span class="token punctuation">}</span>,            3000,            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$i</span>.remove<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    setTimeout<span class="token punctuation">(</span><span class="token string">'delay()'</span>, 2000<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> delay<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">$(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span>.removeAttr<span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5-修改原有相册"><a href="#5-修改原有相册" class="headerlink" title="5. 修改原有相册"></a>5. 修改原有相册</h4><p>&emsp;&emsp;参考教程：后面专门出一期</p><h4 id="6-添加天气小插件"><a href="#6-添加天气小插件" class="headerlink" title="6. 添加天气小插件"></a>6. 添加天气小插件</h4><p>&emsp;&emsp;首先去<a href="https://cj.weather.com.cn/plugin/pc">中国天气官网</a>，配置自己的插件，选择自定义插件—&gt;自定义样式——&gt;生成代码，然后会生成一段代码，复制粘贴到 themes/matery/layout/layout.ejs即可。</p><h4 id="7-关于我页面添加个人简历"><a href="#7-关于我页面添加个人简历" class="headerlink" title="7. 关于我页面添加个人简历"></a>7. 关于我页面添加个人简历</h4><p>&emsp;&emsp;打开theme/matery/layout/about.ejs文件，大约在13行。有一个div class=”card”标签，找出其对应结尾的标签，大约在61行左右，然后在新增如下代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card-content article-card-content"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"title center-align"</span> data-aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fa fa-address-book"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>%- __<span class="token punctuation">(</span><span class="token string">'个人简历'</span><span class="token punctuation">)</span> %<span class="token operator">></span>              <span class="token operator">&lt;</span>/div<span class="token operator">></span>                 <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"articleContent"</span> data-aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">></span>                     <span class="token operator">&lt;</span>%- page.content %<span class="token operator">></span>                 <span class="token operator">&lt;</span>/div<span class="token operator">></span>           <span class="token operator">&lt;</span>/div<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><p>&emsp;&emsp;注意粘贴的位置和空格要正确，这里的位置随你自己设置，你也可以把简历作为第一个card，然后/source/about/index.md下面写上你的简历了（就像写博客一样）。</p><h4 id="8-豆瓣书单电影页面"><a href="#8-豆瓣书单电影页面" class="headerlink" title="8. 豆瓣书单电影页面"></a>8. 豆瓣书单电影页面</h4><p>1.首先在博客站点目录执行下面的命令安装豆瓣插件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-douban --save    </code></pre><p>2.紧接着在博客站点目录的配置文件_config.yml下，添加如下配置：</p><pre class=" language-bash"><code class="language-bash">douban:   user: 252345665    <span class="token comment" spellcheck="true">#这个需要修改为你个人的id  </span>  builtin: <span class="token boolean">false</span>   <span class="token comment" spellcheck="true">#如果想生成豆瓣页面，这个需要设置为true</span>  book:       title: <span class="token string">'This is my book title'</span>       quote: <span class="token string">'This is my book quote'</span>   movie:       title: <span class="token string">'This is my movie title'</span>       quote: <span class="token string">'This is my movie quote'</span>   game:       title: <span class="token string">'This is my game title'</span>       quote: <span class="token string">'This is my game quote'</span>   timeout: 10000</code></pre><p>**user:**你的豆瓣ID。打开豆瓣，登入账户，然后在右上角点击 ”个人主页“，这时候地址栏的URL大概是这样：<a href="https://www.douban.com/people/xxxxxx/">https://www.douban.com/people/xxxxxx/</a> ，其中的”xxxxxx”就是你的个人ID了。<br><strong>builtin：</strong>是否将生成页面的功能嵌入 hexo s 和 hexo g 中，默认是 false ，另一可选项为 true 。<br><strong>title：</strong> 该页面的标题。<br><strong>quote：</strong> 写在页面开头的一段话,支持html语法。<br><strong>timeout：</strong> 爬取数据的超时时间，默认是 10000ms，如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。<br>如果只想显示某一个页面(比如movie)，那就把其他的配置项注释掉即可。</p><p>3.然后再主题配置文件_config.yml中添加关于此页面的菜单：(例如)</p><pre class=" language-bash"><code class="language-bash">menu:    媒体:       url: /       icon: fas fa-list       children:         - name: 电影           url: /movies           icon: fas fa-film         - name: 书单           url: /books           icon: fas fa-book         - name: 游戏           url: /games           icon: fas fa-gamepad</code></pre><p>4.适配Matery主题：在 /themes/hexo-theme-matery/layout 文件夹下面创建一个名为 douban.ejs 的文件，并将下面的内容复制进去：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/post-cover'</span><span class="token punctuation">)</span> %<span class="token operator">></span> <span class="token operator">&lt;</span>style<span class="token operator">></span>     .hexo-douban-picture img <span class="token punctuation">{</span>        width: 100%<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>main class<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"contact"</span> class<span class="token operator">=</span><span class="token string">"container chip-container"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card-content"</span> style<span class="token operator">=</span><span class="token string">"padding: 30px"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>h1 style<span class="token operator">=</span><span class="token string">"margin: 10px 0 10px 0px;"</span><span class="token operator">></span><span class="token operator">&lt;</span>%<span class="token operator">=</span> page.title %<span class="token operator">></span><span class="token operator">&lt;</span>/h1<span class="token operator">></span>                 <span class="token operator">&lt;</span>%- page.content %<span class="token operator">></span>             <span class="token operator">&lt;</span>/div<span class="token operator">></span>         <span class="token operator">&lt;</span>/div<span class="token operator">></span>         <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card-content"</span> style<span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>h3 style<span class="token operator">=</span><span class="token string">"margin: 5px 0 5px 5px;"</span><span class="token operator">></span>如果你有好的内容推荐，欢迎在下面留言！<span class="token operator">&lt;</span>/h3<span class="token operator">></span>             <span class="token operator">&lt;</span>/div<span class="token operator">></span>         <span class="token operator">&lt;</span>/div<span class="token operator">></span>         <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.gitalk <span class="token operator">&amp;&amp;</span> theme.gitalk.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/gitalk'</span><span class="token punctuation">)</span> %<span class="token operator">></span>            <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.gitment.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                 <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/gitment'</span><span class="token punctuation">)</span> %<span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.disqus.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                 <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/disqus'</span><span class="token punctuation">)</span> %<span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.livere <span class="token operator">&amp;&amp;</span> theme.livere.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                 <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/livere'</span><span class="token punctuation">)</span> %<span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.valine <span class="token operator">&amp;&amp;</span> theme.valine.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                 <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/valine'</span><span class="token punctuation">)</span> %<span class="token operator">></span>             <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>         <span class="token operator">&lt;</span>/div<span class="token operator">></span>     <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/main<span class="token operator">></span></code></pre><p>5.然后在博客站点目录下的node_modules文件夹下找到hexo-douban/lib，文件夹下有三个js文件，分别为：books-generator.js 、games-generator.js 、movies-generator.js，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容：</p><pre class=" language-bash"><code class="language-bash">/* 原文件内容为 layout: <span class="token punctuation">[</span><span class="token variable"><span class="token variable">`</span>page<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>post<span class="token variable">`</span></span><span class="token punctuation">]</span> ，将其修改为下面的内容*/layout: <span class="token punctuation">[</span><span class="token variable"><span class="token variable">`</span>page<span class="token variable">`</span></span>, <span class="token variable"><span class="token variable">`</span>douban<span class="token variable">`</span></span><span class="token punctuation">]</span></code></pre><p>6.最后就是使用并生成相应的页面，执行命令如下:</p><pre class=" language-bash"><code class="language-bash">hexo douban     </code></pre><p>&emsp;&emsp;<strong>需要注意的是</strong>，通常大家都喜欢用 hexo d 来作为 hexo deploy 命令的简化，但是当安装了 hexo douban 之后，就不能用 hexo d 了，因为 hexo douban 跟 hexo deploy 的前缀都是 hexo d ，你以后执行的 hexo d 将不再是 Hexo 页面的生成，而是豆瓣页面的生成。</p><p>&emsp;&emsp;以下是可选的命令参数：</p><pre class=" language-bash"><code class="language-bash">-h, --help    <span class="token comment" spellcheck="true"># 帮助页面</span>-b, --books   <span class="token comment" spellcheck="true"># 只生成书单页面</span>-g, --games   <span class="token comment" spellcheck="true"># 只生成游戏页面</span>-m, --movies  <span class="token comment" spellcheck="true"># 只生成电影页面</span></code></pre><p>&emsp;&emsp;<strong>当站点配置文件的builtin的值为true时，生成页面的功能会嵌入到hexo g和hexo s中，在进行部署生成操作，会自动生成相应的页面。</strong></p><h4 id="9-外链跳转插件"><a href="#9-外链跳转插件" class="headerlink" title="9. 外链跳转插件"></a>9. 外链跳转插件</h4><p>&emsp;&emsp;hexo-external-link是一个跳转外链相关插件。自动为所有html文件中外链的a标签生成对应的属性。 比如 设置target=’_blank’, rel=’external nofollow noopener noreferrer’ 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下 go.html;</p><p>&emsp;&emsp;使用 npm 或者 yarn 安装</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">## npm 安装</span><span class="token function">npm</span> <span class="token function">install</span> hexo-external-link --save<span class="token comment" spellcheck="true">## yarn 安装</span>yarn add hexo-external-link</code></pre><p>&emsp;&emsp;之后再hexo博客站点根目录下添加如下配置：</p><pre class=" language-bash"><code class="language-bash">hexo_external_link:  enable: <span class="token boolean">true</span>  enable_base64_encode: <span class="token boolean">true</span>  url_param_name: <span class="token string">'u'</span>  html_file_name: <span class="token string">'go.html'</span>  target_blank: <span class="token boolean">true</span>  link_rel: <span class="token string">'external nofollow noopener noreferrer'</span>  domain: <span class="token string">'your_domain'</span> <span class="token comment" spellcheck="true"># 如果开启了防盗链</span>  safety_chain: <span class="token boolean">true</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">enable</span> - 是否开启hexo_external_link插件 - 默认 <span class="token boolean">false</span>enable_base64_encode - 是否对跳转url使用base64编码 - 默认 fasleurl_param_name - url参数名,在跳转到外链传递给html_file_name的参数名 - 默认 ‘u’html_file_name - 跳转到外链的页面文件路径 - 默认 ‘go.html’target_blank - 是否为外链的a标签添加target<span class="token operator">=</span><span class="token string">'_blank'</span> - 默认 <span class="token boolean">true</span>link_rel - 设置外链的a标签的rel属性 - 默认 ‘external nofollow noopener noreferrer’domain - 如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.hostsafety_chain - go.html 为了防止外链盗用 对域名进行的判断 - 默认 <span class="token boolean">false</span></code></pre><h4 id="10-添加动态科技线条背景"><a href="#10-添加动态科技线条背景" class="headerlink" title="10. 添加动态科技线条背景"></a>10. 添加动态科技线条背景</h4><p>&emsp;&emsp;在themes/matery/layout/layout.ejs文件中添加如下代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--动态线条背景--<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span>color<span class="token operator">=</span><span class="token string">"122 103 238"</span> opacity<span class="token operator">=</span><span class="token string">'0.7'</span> zIndex<span class="token operator">=</span><span class="token string">"-2"</span> count<span class="token operator">=</span><span class="token string">"200"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>&emsp;&emsp;其中：</p><p>&emsp;&emsp;<strong>color：</strong>表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）<br>&emsp;&emsp;<strong>opacity：</strong>表示线条透明度（0~1），默认：0.5<br>&emsp;&emsp;<strong>count：</strong>表示线条的总数量，默认：150<br>&emsp;&emsp;<strong>zIndex：</strong>表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</p><h4 id="11-添加鼠标点击烟花爆炸效果"><a href="#11-添加鼠标点击烟花爆炸效果" class="headerlink" title="11. 添加鼠标点击烟花爆炸效果"></a>11. 添加鼠标点击烟花爆炸效果</h4><p>&emsp;&emsp;首先在themes/matery/source/js目录下新建fireworks.js文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/fireworks.js">连接</a>，将内容复制粘贴到fireworks.js即可。</p><p>&emsp;&emsp;然后再themes/matery/layout/layout.ejs文件内添加下面的内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>canvas class<span class="token operator">=</span><span class="token string">"fireworks"</span> style<span class="token operator">=</span><span class="token string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/canvas<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/fireworks.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>&emsp;&emsp;然后hexo clean &amp;&amp; hexo g &amp;&amp; hexo s即可，就可以看到效果了。</p><h4 id="12-添加樱花飘落效果"><a href="#12-添加樱花飘落效果" class="headerlink" title="12. 添加樱花飘落效果"></a>12. 添加樱花飘落效果</h4><p>&emsp;&emsp;先看效果：我用的就是樱花</p><p>&emsp;&emsp;在themes/matery/source/js目录下新建sakura.js文件，打开这个网址<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/sakura.js">连接</a>，将内容复制粘贴到sakura.js即可。</p><p>&emsp;&emsp;然后再themes/matery/layout/layout.ejs文件内添加下面的内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        //只在桌面版网页启用特效        var windowWidth <span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>window<span class="token variable">)</span></span>.width<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> 768<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document.write<span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/sakura.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="13-添加鼠标彩虹星星掉落跟随效果"><a href="#13-添加鼠标彩虹星星掉落跟随效果" class="headerlink" title="13. 添加鼠标彩虹星星掉落跟随效果"></a>13. 添加鼠标彩虹星星掉落跟随效果</h4><p>&emsp;&emsp;在themes/matery/source/js目录下新建cursor.js文件，打开这个<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/cursor.js">网址</a>，将内容复制粘贴到cursor.js即可。</p><p>&emsp;&emsp;然后再themes/matery/layout/layout.ejs文件内添加下面的内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/cursor.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="14-添加雪花飘落效果"><a href="#14-添加雪花飘落效果" class="headerlink" title="14. 添加雪花飘落效果"></a>14. 添加雪花飘落效果</h4><p>&emsp;&emsp;跟樱花类似<br>&emsp;&emsp;在themes/matery/source/js目录下新建snow.js文件，打开这个<a href="https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/js/snow1.js">网址</a>，将内容复制粘贴到cursor.js即可。</p><p>&emsp;&emsp;然后再themes/matery/layout/layout.ejs文件内添加下面的内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="15-添加自定义页面"><a href="#15-添加自定义页面" class="headerlink" title="15. 添加自定义页面"></a>15. 添加自定义页面</h4><p>&emsp;&emsp;首先看一下效果<br><img src="54.jpg" alt="54"></p><p>&emsp;&emsp;首先在站点目录下的source文件夹下新建aboutme文件，文件名可自定义，然后编写一个index.html放入aboutme文件夹下，然后在主题配置文件下的导航配置信息添加下面的配置：</p><pre class=" language-bash"><code class="language-bash">About:    url: /    icon: fas fa-address-card    children:      - name: 关于我        url: /about        icon: fas fa-user-circle      - name: Another    <span class="token comment" spellcheck="true">#这是新添加的，在原有配置基础上添加</span>        url: /aboutme        icon: fa fa-user-secret</code></pre><p>&emsp;&emsp;然后在站点配置文件下，找到skip_render，在后面添加属性，如下：</p><pre class=" language-bash"><code class="language-bash">skip_render: aboutme/**  <span class="token comment" spellcheck="true"># 其意思为在对文件进行渲染时跳过aboutme文件下的所有文件</span></code></pre><p>&emsp;&emsp;知道方法后，你可以添加你自己想要添加的页面，让你的博客内容更加充实。</p><h4 id="16-添加404页面"><a href="#16-添加404页面" class="headerlink" title="16. 添加404页面"></a>16. 添加404页面</h4><p>&emsp;&emsp;我的404页面是这样的：<br><img src="55.jpg" alt="55"></p><p>&emsp;&emsp;开始说一下配置步骤，首先再站点根目录下的source文件夹下新建404.md文件，里面内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: 404date: 2022-5-2 16:41:10type: <span class="token string">"404"</span>layout: <span class="token string">"404"</span>description: <span class="token string">"Oops～，我崩溃了！找不到你想要的页面了"</span>---</code></pre><p>&emsp;&emsp;紧接着再新建主题文件夹的layout目录下新建404.ejs文件，添加内容如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    /* don<span class="token string">'t remove. */    .about-cover {        height: 90.2vh;    }&lt;/style>&lt;div class="bg-cover pd-header about-cover">    &lt;div class="container">        &lt;div class="row">            &lt;div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2">                &lt;div class="brand">                    &lt;div class="title center-align">                        404                    &lt;/div>                    &lt;div class="description center-align">                        &lt;%= page.description %>                    &lt;/div>                &lt;/div>            &lt;/div>        &lt;/div>    &lt;/div>&lt;/div>&lt;script>    // 每天切换 banner 图.  Switch banner image every day.    $('</span>.bg-cover<span class="token string">').css('</span>background-image<span class="token string">', '</span>url<span class="token punctuation">(</span>https://cdn.jsdelivr.net/gh/Yafine/cdn@2.6/source/medias/banner/<span class="token string">' + new Date().getDay() + '</span>.jpg<span class="token punctuation">)</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><p>&emsp;&emsp;然后部署，再看看效果即可。</p><h4 id="17-文章生成永久链接"><a href="#17-文章生成永久链接" class="headerlink" title="17. 文章生成永久链接"></a>17. 文章生成永久链接</h4><p>&emsp;&emsp;主题默认的文章链接配置是</p><pre class=" language-bash"><code class="language-bash">premalink: :year/:month/:day/:title</code></pre><p>&emsp;&emsp;这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><p>&emsp;&emsp;首先再根目录下执行下面的命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><p>&emsp;&emsp;然后再站点配置文件下添加如下配置：</p><pre class=" language-bash"><code class="language-bash">abbrlink:    alg: crc16   <span class="token comment" spellcheck="true">#算法： crc16(default) and crc32</span>    rep: hex     <span class="token comment" spellcheck="true">#进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span></code></pre><p>&emsp;&emsp;再将站点配置文件的permalink的值修改为：</p><pre class=" language-bash"><code class="language-bash">permalink: posts/:abbrlink.html  <span class="token comment" spellcheck="true"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></code></pre><p>&emsp;&emsp;生成文章的链接格式就会是如下样例（官方样例）:</p><pre class=" language-bash"><code class="language-bash">crc16 <span class="token operator">&amp;</span> hexhttps://post.zz173.com/posts/66c8.htmlcrc16 <span class="token operator">&amp;</span> dechttps://post.zz173.com/posts/65535.htmlcrc32 <span class="token operator">&amp;</span> hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 <span class="token operator">&amp;</span> dechttps://post.zz173.com/posts/1690090958.html</code></pre><p>&emsp;&emsp;生成完后，原md文件的Front-matter 内会增加abbrlink 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p><h3 id="七、添加评论系统"><a href="#七、添加评论系统" class="headerlink" title="七、添加评论系统"></a>七、添加评论系统</h3><p>&emsp;&emsp;我只说我用的评论系统的配置方法，其他的就不说了。</p><h4 id="添加来必力评论系统"><a href="#添加来必力评论系统" class="headerlink" title="添加来必力评论系统"></a>添加来必力评论系统</h4><p>&emsp;&emsp;首先去来<a href="https://livere.com/">必力官网</a>，点击导航栏上的安装，会出现如下图的页面：<br><img src="56.jpg" alt="56"></p><p>&emsp;&emsp;City 版：是一款适合所有人使用的免费版本；<br>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</p><p>&emsp;&emsp;注册完之后，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示：<br><img src="57.jpg" alt="57"></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Livere comment configuration, the default is not activated</span><span class="token comment" spellcheck="true"># Livere 来必力评论模块的配置，默认为不激活</span>livere:  enable: <span class="token boolean">true</span>   <span class="token comment" spellcheck="true"># true即为开启评论系统</span>  uid: <span class="token comment" spellcheck="true">#这里填写你的uid</span></code></pre><p>&emsp;&emsp;然后在执行相关的部署命令，然后查看效果即可。<br><img src="58.jpg" alt="58"></p><h3 id="八、成功了"><a href="#八、成功了" class="headerlink" title="八、成功了"></a>八、成功了</h3><p>&emsp;&emsp;我相信经过大家的不懈努力，大家的博客应该搭建的很好了，虽然用了很多时间，但搭建完成后的成就感是真的巴适。<br>&emsp;&emsp;正如我现在写完了这篇博文，断断续续花了我十多天，一点点敲打出来是真的很辛苦，但完成了的感觉像是在起飞，哈哈。<br>&emsp;&emsp;如果这篇教程对你有些许的帮助，也就是我编写的收获，日后我会不定时进行一些更新，需要友链的请留言。</p><p>&emsp;&emsp;最后，写一个教程真的很不容易，希望各位大佬大家能多多支持，不管是送我<strong>喝瓶水</strong>，还是请我<strong>吃颗糖</strong>，都将是我继续做下去的动力。</p><h4 id="点击最后的“赏”字，谢谢"><a href="#点击最后的“赏”字，谢谢" class="headerlink" title="点击最后的“赏”字，谢谢"></a><center><strong>点击最后的“赏”字，谢谢</strong></center></h4><p><img src="59.jpg" alt="谢谢老板"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建+美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高情商的三种特质</title>
      <link href="/2022/04/24/gao-qing-shang-de-san-chong-te-zhi/"/>
      <url>/2022/04/24/gao-qing-shang-de-san-chong-te-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="高情商的三种特质"><a href="#高情商的三种特质" class="headerlink" title="高情商的三种特质"></a><center>高情商的三种特质</center></h2><p>&emsp;&emsp;做人做事还是要以慈悲为怀，容人之过，善没大焉，度人就是度自己。人生不易，为何不好好说话，非要口出不逊，惹人讨厌，有些人终究还是不知道人字怎么写。<br>&emsp;&emsp;我觉得，人世间与人相处是最难的，人的知识面，经历、秉性、内向、外向、表达能力、所处的位置等等，千差万别。<br>有的人身为一个企业的领导，整天盛气凌人，一言堂，听不进别人的话，甚至于随便批评人、嘲笑人，我行我素，只因为一个原因，他手中有权，想怎样就怎样，你若说话，必遭报复。<br>&emsp;&emsp;这样的领导不在少数，我们都见过，也听到过，这样的人虽然是领导但内心是虚弱的，嘴硬心虚，口心无德，别说情商，连做人都不会，权力让他趾高气扬，这样的人能耐不大脾气大，主要是怕人小看他，其实他已经输在了嘴巴上。<br>&emsp;&emsp;<strong>而情商高的人，一般会有这三种特质！</strong></p><h3 id="1、情商高的人，懂得好好说话。"><a href="#1、情商高的人，懂得好好说话。" class="headerlink" title="1、情商高的人，懂得好好说话。"></a>1、情商高的人，懂得好好说话。</h3><p>&emsp;&emsp;情商高的人会不动声色，倾听你的声音，让你一吐为快，让他知道有人懂他，尊重他。我们的心理医生和调解员的本事就是在于她懂得别人的苦处，知道让他发泄，借机予以正面引导，晓之以理，喻之以义，化解他的情绪，人间还有真情在。<br>人间烟火气，不过是一日三餐，相互尊重是烟火气中烹饪出的最美的一道美味。<br>&emsp;&emsp;人会说话有口德，不会说话遭祸殃。说一领导要下乡视察，可天空乌云密布，似有雨下，有人说，“XX出行雨水多”，可有人说：“贵人出行雨水多”，为领导解了围。<br>&emsp;&emsp;海明威说：“两年学说话，一生学闭嘴”。确实是这样，一个人生活中，要懂得尊重人，善解人意，站在对方立场替人考虑，替别人考虑才是高情商的表现，如果你总是把自己的想法强加给别人，情商低到尘埃里。<br>做人懂得尊重别人就是对人的一种温暖，好好说话，是善良的释放。</p><h3 id="2、情商高的人，懂得顾及别人的感受。"><a href="#2、情商高的人，懂得顾及别人的感受。" class="headerlink" title="2、情商高的人，懂得顾及别人的感受。"></a>2、情商高的人，懂得顾及别人的感受。</h3><p>&emsp;&emsp;孟非曾说过一句话：“我觉得我们每一个人，都要在和别人的关系当中，都要学会克制自己，尽可能地考虑别人的感受，这个和虚伪没有关系。”<br>情商高的人，其实懂得正确处理自己的情绪，在遇到事情的时候，即使是自己看不顺眼的，也不会由着自己的性子来对别人撒泼，而是懂得静下心来，心平气和地跟别人商量如何解决问题。<br>&emsp;&emsp;情商高的人，在做事的时候，其实都懂得顾及别人的感受，懂得换位思考，将心比心，这样更有利地处理好身边的人际关系。<br>&emsp;&emsp;之前看综艺《妻子的浪漫旅行》中主持人刘涛，当她对蒋勤勤说节目组请她来当团长，是因为妻子们说她来了大家都会安心。<br>&emsp;&emsp;没有想到，蒋勤勤突然冒出一句：早知道是你当团长，我就不想来了。<br>&emsp;&emsp;这句话一说出口，现在的气氛瞬间冷却，变得很尴尬，然而刘涛及时化解了气氛。<br>&emsp;&emsp;后来蒋勤勤解释说是因为刘涛和秦海璐的关系太好了，担心自己去到以后被人排挤。<br>&emsp;&emsp;而刘涛就说，你放心，我不是这种人。<br>&emsp;&emsp;刘涛巧妙地化解了尴尬，是高情商的一种表现，也站在了蒋勤勤的角度为她排除了顾虑。<br>&emsp;&emsp;因为刘涛说，我能够理解蒋勤勤的顾虑，所以我会更加地让她明白不是这样的。<br>&emsp;&emsp;所以，懂得观察别人的感受，而是宽容大度地处理问题，不仅巧妙地缓和了关系，而且还能让自己给人留下一个好印象，不轻易释放自己的情绪，懂得控制自己的情绪的人，才是情商高。</p><h3 id="3、情商高的人，说话有分寸，不会乱开玩笑。"><a href="#3、情商高的人，说话有分寸，不会乱开玩笑。" class="headerlink" title="3、情商高的人，说话有分寸，不会乱开玩笑。"></a>3、情商高的人，说话有分寸，不会乱开玩笑。</h3><p>&emsp;&emsp;爱默生有一句话说，同人开玩笑务必要掌握分寸感。适当的幽默玩笑就如同饭里的佐料一样，可以让我们的生活更加的轻松和愉悦。然而，过量的或者不适当的佐料却会糟蹋掉一顿美餐。<br>&emsp;&emsp;人与人之间是需要分寸的，这个分寸就体现在为人处世之中，懂得什么话该说，什么话不该说，懂得看清别人的性格，知道哪些人可以开玩笑，哪些人不能开玩笑。<br>&emsp;&emsp;人与人性格不同，自然就会有很多需要注意的地方。而高情商的人，就懂得观察人与人之间的微妙之处。<br>高情商的人在跟人相处的之中，知道见什么人说什么话，拿捏好分寸，这样的人走到哪里都很吃香，不会随便得罪人，懂得管住自己的嘴，察言观色，也是一种本事。<br>&emsp;&emsp;情商高的人，知道对方小气开不起玩笑，就不会跟他谈一些敏感的事情，知道出言有尺，嬉闹有度，就算关系再好，不越界，才能相处舒服。<br>&emsp;&emsp;在相处中，懂得给别人空间和体面，是成年人的必修课。<br>&emsp;&emsp;人与人的相处，是一门学问。<br>&emsp;&emsp;一个人的情商是可以慢慢修炼的，人生一场，就是一场修行的过程，前路漫漫，愿我们都能够修炼成一个高情商的人。<br>&emsp;&emsp;这样，在生活中，才能更好地处理好人际关系，不会因为自己的愚笨而得罪人。</p>]]></content>
      
      
      <categories>
          
          <category> 人情世故 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情商 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客编写技巧</title>
      <link href="/2022/04/21/hexo-bo-ke-zhuan-xie-ji-qiao/"/>
      <url>/2022/04/21/hexo-bo-ke-zhuan-xie-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="新建和上传"><a href="#新建和上传" class="headerlink" title="新建和上传"></a>新建和上传</h2><p>基本流程：<br>1.新建 在博客文件夹下启动gitbash,运行 Hexo new postname<br>2.编辑 在source=&gt;post=&gt;文件下找到自己创建的 postname.md<br>3.用编辑器打开编写，并保存<br>4.gitbash页面，hexo s 在本地预览<br>5.针对性修改，完成后hexo g -d 发布成功</p><h2 id="优化技巧"><a href="#优化技巧" class="headerlink" title="优化技巧"></a>优化技巧</h2><p>1.编辑时一般都是用二级标题开始就够了，一般博客不是长文，这样不会显得字特别大<br>2.使用Table快速调出代码块<br>3.很多语法要注意行间距，出不来就多空一行试试<br>4.图床推荐使用时可以专门注册一个账号使用<br>5.发布前先通过预览本地网站效果，总有要修改的地方<br>6.<span id="more"></span> 用这个指令对文章进行摘要分割，这样在首页就只会出现代码以上的摘要内容<br>7.多用##指令，少用习惯性加粗。这样在文章自动生成的目录会更有条理<br>8.主动添加文章titile下面的catagories 和 tag</p><h2 id="编辑器和语法"><a href="#编辑器和语法" class="headerlink" title="编辑器和语法"></a>编辑器和语法</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>Hexo支持.md格式的博客，所以需要找到自己喜欢的编辑器,然后学习Markdown语法。<br>编辑器刚开始推荐使用有预览效果的工具，因为此时不太熟悉语法，可能会出现错误。<br>这里推荐两个自己喜欢的。<br>1.印象笔记markdown<br>2.编辑器Markpad<br>Atom (Ctrl+shift+M 调出实时预览效果)<br>Sublime<br>印象笔记，使用方法：新建一个markdown笔记，然后就开始写，写好了复制到我们博客文件夹的post文件夹.md文件里。<br>Markpad，使用方法：直接打开创建的文档，写就完了。选择它的原因是界面很微软风，喜欢。直接在本地商店免费下载。<br>Atoma 或 Sublime，是通用的多语言程序编辑器，我们电脑至少要装一个，方便打开其它格式的文件，我们在修改预览调试时都要使用。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>常用语法<br>1.标题<br>在句首插入#表示标题，有六种标题。也就是最多可以有6个#号表示最小字号的标题<br>2.列表<br>有序列表 数字加英文的点 如 1. 2. 3.<br>无序列表 <em>+- 这三个任意一种后面文本接空格<br>3.引用块<br>在引用块的句首加&gt;<br>嵌套引用需要缩进 比如第一次嵌套用&gt;&gt;<br>4.代码块<br>使用 ``` 进行代码块引用 这里可以接对应的代码语言名Markdown会自行使用对应的背景渲染。<br>行内引用 可以用两个`` 夹住句子<br>当然最快的应该是用Table空格出来也可以<br>5.链接<br>超链接 [A](网址 “optional title”)<br>图片链接 !<a href="%E7%BD%91%E5%9D%80/%E5%9C%B0%E5%9D%80">A</a> 地址也可以用本地路径，可以在makdown文件夹建一个picture文件夹，optional title的鼠标悬停图片上会显示，可不写。<br>6.强调<br>在字两边加一个</em>为斜体<br>在字两边加两个<strong>为粗体<br>在字两边加三个</strong>*为粗斜体 记得不要有与字不要有空格<br>7.分割线<br>连续三个或以上星号或下划线或减号 都可以生成一个分割线如下<br>8.反斜杠<br>Markdown 支持将大部分符号前面加上反斜杠来帮助插入普通的符号<br>9.居中居右居左<br>居中center&gt;文本</center><br>居右p align=”right”&gt;文本</p><br>居左p align=”left”&gt;文本</p><br>10.换行<br>换行</br>或两个或以上空格</p><h2 id="进阶语法"><a href="#进阶语法" class="headerlink" title="进阶语法"></a>进阶语法</h2><p>1.表格<br>使用|分隔不同的单元格，使用-分隔表头与其它行<br>右对齐——: ，左对齐 :——居中对齐—:—，默认居中对齐——<br>日期 |天气 | 心情<br>:– | - - |—:<br>B | A | C<br>注意：这里有个坑，我试了很多次才找出来。：冒号一定要在英文状态下打，不然识别不了。然后-数量不限定，可以一个也可以多个。<br>2.图表<br>图表有更多代码。参考这里<br>这种用的少，需要用的时候可以再来调取用法。<br>3.字体字号和颜色<br>font face=”黑体”&gt;我是黑体字</font> （都有&lt;没有写出来）<br>font face=”微软雅黑”&gt;我是微软雅黑</font><br>font face=”STCAIYUN”&gt;我是华文彩云</font><br>font color=#0099ff size=7 face=”黑体”&gt;color=#0099ff size=3 face=”黑体”</font><br>font color=#00ffff size=3&gt;color=#00ffff</font><br>font color=gray size=3&gt;color=gray</font><br>Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3<br>。颜色是按十六进制颜色值来的。常用的红色（#FF0000）金色（#FFD700）黄色（#FFFF00）<br>4.图片居中<br>居中，在图片引用上一栏加 div alighn=center&gt;<br>改变图片大小 img src=”./xxx.png 路径” width = “300” height = “200” alt=”图片名称” /&gt; 可能会导致图变形，用的少<br>5.待办事宜<br>横杠+空格+方括号+空格+文本 - [ ]通过方括号内加入X来区别已办未办，注意方括号也要有空格。<br>要注意空格空行。<br>爬山<br>上课<br>冷门用法<br>1.删除线<br>使用 ~~ 将要删除文字夹起来。表示删除<br>HAPPYDAY<br>2.注脚<br>使用 [^footer] 表示注脚，注意一个引用要写两次。如下<br>玫瑰是什么颜色[^footer1]<br>[^footer1]: 玫瑰是红的。<br>玫瑰是什么颜色^footer1<br>3.页内跳转<br>使用html代码实现页内跳转。在要跳转到的位置定义个锚 span id = “jump”&gt;World</span>，然后使用<a href="#jump">HELLO</a>将你好设置为一单击即跳转到WORLD所在位置的效果<br>HELLO<br>World<br>4.LateX公式<br>行内公式：使用两个”$”符号引用公式: $公式$<br>行间公式：使用两对“$$”符号引用公式： $$公式$$<br>这个其实挺复杂，参考这里。<br>5.首行缩进<br>半方大的空白&ensp;或&#8194;【常用】<br>全方大的空白&emsp;或&#8195;<br>不断行的空白格&nbsp;或&#160;<br>间距如下：<br> AAA<br>AAA<br>AAA<br>6.视频嵌套<br>7.音频嵌套<br>基本用法能解决大部分情景，高阶用法一般和HTML语法整合的多，但是用的少。如果想更好的进阶可以学习一下HTML语法。一个原则，常用的要能熟练内化为自己的潜意识，少用的要收录起来需要时可以最短时间内调用。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 撰写技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虎年吉</title>
      <link href="/2022/04/21/hu-nian-ji/"/>
      <url>/2022/04/21/hu-nian-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="虎年吉"><a href="#虎年吉" class="headerlink" title="虎年吉"></a><center>虎年吉</center></h2><center>Crazy Yu</center><center>虎年大吉老人康，</center><center>年味浓浓长辈忙。</center><center>青丝绿发最欢畅，</center><center>正是春节好时光。</center><center>于2022年2月4日，上午11:46所作，团年结束，在韩家群里有感。</center>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建属于自己的Blog</title>
      <link href="/2022/04/18/da-jian-shu-yu-zi-ji-de-blog/"/>
      <url>/2022/04/18/da-jian-shu-yu-zi-ji-de-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建github个人仓库"><a href="#一、创建github个人仓库" class="headerlink" title="一、创建github个人仓库"></a>一、创建github个人仓库</h2><p> 1.进入<a href="https://github.com/%E5%AE%98%E7%BD%91%E6%B3%A8%E5%86%8C">https://github.com/官网注册</a><br> 2.建立仓库（注意，仓库名格式：用户名.<a href="http://github.io)/">http://github.io）</a></p><h2 id="二、下载：git、nodejs"><a href="#二、下载：git、nodejs" class="headerlink" title="二、下载：git、nodejs"></a>二、下载：git、nodejs</h2><p>1.下载链接<br>（1）<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>（2）<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a><br>2.检查软件是否安装成功（<br>（1）检查git：git –version（新建文件夹blog，在里面空白处右击Git Bash Here，输入git –version，出现版本号就算成功了）<br>（2）检查nodejs：node -v（Win+R ，输入 cmd ，回车。输入 node -v ，npm -v，回车；输入 npm -v，出现版本号就算成功了）</p><h2 id="三、安装hexo"><a href="#三、安装hexo" class="headerlink" title="三、安装hexo"></a>三、安装hexo</h2><p>1.F：（冒号是英文）<br>2.cd F:\Program Files3.\CrazyYuchi<br>4.hexo init blog（建立博客）<br>5.cd blog（进入blog）<br>6.hexo serve（运行博客）（出现<a href="http://localhost:4000，在浏览器中打开即可预览）">http://localhost:4000，在浏览器中打开即可预览）</a><br>7.Ctrl+c（结束博客）</p><h2 id="四、编辑"><a href="#四、编辑" class="headerlink" title="四、编辑"></a>四、编辑</h2><p> 1.下载vscode(在里面搜索Chines变中文<br> 2.打开文件夹，找到自己的blog文件夹<br> 3.进入source_post里的hello-word.md进行编辑</p><h2 id="五、主题"><a href="#五、主题" class="headerlink" title="五、主题"></a>五、主题</h2><h3 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h3><p>就是直接将主题相关的文件整个放进站点的 themes 目录即可，一般主题都提供压缩包、git 等多种安装途径。我们采用下载稳定版压缩包的方式进行安装。访问 <a href="https://github.com/theme-next/hexo-theme-next/archive/refs/tags/v7.8.0.zip">https://github.com/theme-next/hexo-theme-next/archive/refs/tags/v7.8.0.zip</a> 下载 7.8.0 版本 NexT 主题的压缩包，将该压缩包解压到 themes 目录，并将文件夹改名为 next 即可。(然后进行美化，不会的可以扣我，下方评论)</p><h3 id="2-具体文件"><a href="#2-具体文件" class="headerlink" title="2.具体文件"></a>2.具体文件</h3><p>也就是 themes 文件夹中包含一个 next 文件夹，next 中包含了多个主题相关文件、文件夹。</p><h3 id="3-启用方法"><a href="#3-启用方法" class="headerlink" title="3.启用方法"></a>3.启用方法</h3><p>打开站点配置文件，也就是 blog 文件夹中的 _config.yml 找到 theme 字段，默认情况下应该在 100 行的位置，将原来的 theme: landscape 改为 theme: next 即可。</p><h3 id="4-预览"><a href="#4-预览" class="headerlink" title="4.预览"></a>4.预览</h3><p>启动本地服务器可以预览主题应用之后的效果。(hexo s)</p><h2 id="六、公私钥匙"><a href="#六、公私钥匙" class="headerlink" title="六、公私钥匙"></a>六、公私钥匙</h2><p>1.在blog文件夹bash：ssh<br>2.继续ssh-keygen -t rsa -C “<a href="mailto:&#x39;&#x33;&#49;&#56;&#52;&#54;&#x34;&#50;&#x37;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#x6d;">&#x39;&#x33;&#49;&#56;&#52;&#54;&#x34;&#50;&#x37;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#x6d;</a>“(4次回车)<br>或者F:\Program Files\CrazyYuchi\blog&gt;ssh-keygen（一直回车3次）<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (C:\Users\Administrator/.ssh/id_rsa):（公钥位置，公钥id_rsa.pub，私钥id_rsa）<br>Created directory ‘C:\Users\Administrator/.ssh’.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in C:\Users\Administrator/.ssh/id_rsa.<br>Your public key has been saved in C:\Users\Administrator/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:RPZBzrPkT94YtCiqLGKBvx+eC0XO2y8RWUlQMB6Qtyw ycy@WIN10-004161903<br>The key’s randomart image is:<br>+—[RSA 3072]—-+<br>|    .o===oo      |<br>|    …=o+ .     |<br>|    .o.+. * .    |<br>|   +E =. o = .   |<br>|.   +. .S + +    |<br>|.. . o.. . + +   |<br>| .o o o.    + .  |<br>|..o+ +..         |<br>|…+B. ..        |<br>+—-[SHA256]—–+</p><p>F:\Program Files\CrazyYuchi\blog&gt;<br>3.打开github，在settings的ssh and gpg keys，新建ssh，将钥匙复制进去（.pub里面的）。<br>4.确定是否绑定成功：ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;</a><br>有问题可以看看这个<a href="https://blog.csdn.net/YR_112233/article/details/122436258">https://blog.csdn.net/YR_112233/article/details/122436258</a></p><h2 id="七、发布"><a href="#七、发布" class="headerlink" title="七、发布"></a>七、发布</h2><p>1.找到_config.yml进入<br>deploy:<br>  type: git<br>  repository: <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#109;</a>:CrazyYuchi/CrazyYuchi.github.io.git（改成仓库code的ssh地址）<br>  branch: main<br>2.npm install hexo-deployer-git –saver<br>3.openssh<br>hexo g<br>hexo d<br>输入账号，密码（就是下面的令牌）<br>4.生成令牌：在settings的developer settings里面personal access tokens，新建一个30天，全选，令牌保存下来。<br>5.三步走<br>hexo clean（清零）<br>hexo g（生成）<br>hexo d（部署）<br>最后，进入自己的网站即可</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/17/hello-world/"/>
      <url>/2022/04/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CrazyYu’s Blog出生了</title>
      <link href="/2022/04/16/crazyyu-s-blog-chu-sheng-liao/"/>
      <url>/2022/04/16/crazyyu-s-blog-chu-sheng-liao/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么搭建博客"><a href="#为什么搭建博客" class="headerlink" title="为什么搭建博客"></a>为什么搭建博客</h2><p>第一次遇见博客还在b站，我好奇的点进了评论区的一个博客，感觉我进入了新世界的大门，我感觉他们好厉害，可以设置自己喜欢的内容，更新自己的技术知识，写自己的所见所闻，为的就是自己记录，与人分享，于是我着魔了，我想自己搭建一个博客的想法油然而生，对于我一个零基础的小白，我知道很难，但我相信我可以的，就如做人做事一样，先要相信自己，后面的交给努力。</p><h2 id="具体是怎么做的"><a href="#具体是怎么做的" class="headerlink" title="具体是怎么做的"></a>具体是怎么做的</h2><p>第一天，我在b站找了一个点赞最多的视频进行学习，一步一步跟着视频进行安装软件、配置环境、创建仓库……到了上传到github仓库时，就是完成不了，程序报错，我进行百度翻译，百度找方法，可是就是解决不了，不是找不到，而是我自己对照着方法总是会出现一些问题，到了下午我决定找一个大佬学习，在QQ群搜索了hexo讨论群，加入进去就在里面问，几个小时没有回复，我就关了电脑准备休息一下，直到下午4点多有人回复我了，他叫Z，我给他打了备注hexo 大佬，我给他说了很多问题,他都一一的给我解答，到晚上又卡住了，因为前面我自己在搭建的过程中，有很多是混乱的，hexo 大佬就让我从新在搭建一个，并给我发了他认为比较好的视频教程，由于很晚了，他就先睡了，但叫我把不懂的发给他，等醒了再给我说，于是我自己琢磨到晚上两点，把不懂的都发了过去，直到我躺下睡觉，结束这一天。<br>第二天，他很早就醒了，给我发了信息，我起来后就开始今天搭建，基本上这一天都在和他聊天，不停的出错不停的问他问题，从下载git、node、创建github仓库，再到hexo int blog、hexo s、hexo clean、hexo g、hexo d等命令的执行，直到我的hello-world可以在网站上进行访问，真的激动，坐着弄了一两天，突然有了一点收获，感觉真的太棒了，然后进行了更换主题等知识的学习。<br>第三天，我换了好几个主题，最后确定以matery为主题，但内容的修改又是大问题，很多只能在网上进行学习，改到晚上8点08分，也就是现在我正在敲这句话的时候，虽然很多功能都是不完善的，但大体上已经可以见人了，哈哈…今天问hexo 大佬的时间越来越少，因为这两天真的问的太多了，都有点不好意思，我们素不相识，但你还是倾囊相授，真的很感谢你，在这里对你说声–谢谢你。</p><h2 id="搭建后的感受"><a href="#搭建后的感受" class="headerlink" title="搭建后的感受"></a>搭建后的感受</h2><p>外门小白搭建真的很难，但决定要学的时候就一定要坚持下来。我看见有些评论区学了几个小时就放弃了的，有学了一两天卡住了就放弃的，也有小白几个小时也就成功了，不同的人会有不同的经过，但一定要坚持初心，砥砺前行。从小事做起，从一个兴趣爱好做起，既然要做就一定要认真做，不要先做好，但要先做成。我是一个学的很慢的人，都能搭成这样，相信你们一定也可以的，希望下一个搭建的小白能够不要放弃，相信自己。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一次搭建博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
